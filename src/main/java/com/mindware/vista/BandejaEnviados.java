package com.mindware.vista;

import com.mindware.domain.Mensaje;
import com.mindware.services.MensajeService;
import com.mindware.util.SendSms;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.data.util.converter.StringToDateConverter;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.server.FileDownloader;
import com.vaadin.server.FileResource;
import com.vaadin.server.Resource;
import com.vaadin.server.StreamResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.server.VaadinService;
import com.vaadin.shared.ui.MultiSelectMode;
import com.vaadin.shared.ui.grid.HeightMode;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.*;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Grid.HeaderCell;
import com.vaadin.ui.Grid.HeaderRow;
import com.vaadin.ui.renderers.DateRenderer;

import de.steinwedel.messagebox.MessageBox;


import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

//import org.tepi.filtertable.FilterTable;
//import org.tepi.filtertable.FilterDecorator;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import javax.servlet.annotation.WebServlet;

import org.vaadin.addons.ExportExcelComponentConfiguration;
import org.vaadin.addons.ExportExcelConfiguration;
import org.vaadin.addons.ExportExcelSheetConfiguration;
import org.vaadin.addons.ExportToExcelUtility;
import org.vaadin.addons.ExportType;
import org.vaadin.addons.builder.ExportExcelComponentConfigurationBuilder;
import org.vaadin.addons.builder.ExportExcelConfigurationBuilder;
import org.vaadin.addons.builder.ExportExcelSheetConfigurationBuilder;
import org.vaadin.addons.formatter.ColumnFormatter;
import org.vaadin.addons.formatter.PrefixColumnFormatter;
import org.vaadin.addons.formatter.SuffixColumnFormatter;
import org.smslib.Service;

public class BandejaEnviados extends CustomComponent {


	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Grid tblEnviados;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;

	private NativeButton btnExportarExcel;
	private NativeButton btnCargarMensajes;
	private Label titulo;
	private MensajeService mensajeService;
	
	private Grid grid;
//	private ProgressBar progressBar;
	private SendSms sendSms;
	
	private int usuarioId;
	
	
	
	public int getUsuarioId() {
		return usuarioId;
	}

	public void setUsuarioId(int usuarioId) {
		this.usuarioId = usuarioId;
	}

	public BandejaEnviados(int userId) {
		
		usuarioId = userId;
		buildMainLayout();
		cabeceraTabla();
		setCompositionRoot(mainLayout);

		//Llena bandeja de enviados
		
		cargarMensajes();
		exportarExcel();
		datosBandejaEnviados(true);
		
	
	}

	private List<Mensaje> mensajes() {
		ArrayList<List<String>> arregloMensajes = new ArrayList<List<String>>();
		IndexedContainer container = (IndexedContainer) tblEnviados.getContainerDataSource();
		List<Mensaje> listaMensajes = (List<Mensaje>) container.getItemIds();

		return listaMensajes;
	}
		
	private void cargarMensajes() {
		btnCargarMensajes.addClickListener(new Button.ClickListener() {
			@Override
			public void buttonClick(Button.ClickEvent event) {
				datosBandejaEnviados(false);
			}
		});

	}

	////////////////////
	
	 private ExportToExcelUtility<Mensaje> customizeExportExcelUtility() {
	        /* Configuring Components */
		 	Object[] visibleColumns = new Object[] { "ID", "Celular", "Mensaje", "Fecha Envio", "Hora Envio", "Nombre","Status", "Detalle Status","Nro intentos" };
			String[] columnHeaders = new String[] { "ID", "Celular", "Mensaje", "Fecha Envio", "Hora Envio", "Nombre","Status", "Detalle Status", "Nro intentos" };
			
			HashMap<Object, ColumnFormatter> columnFormatters = new HashMap<>();
			columnFormatters.put("Fecha Envio", new SuffixColumnFormatter("dd-MMM-yyyy"));
			
			
		
	        ExportExcelComponentConfiguration componentConfig1 = new ExportExcelComponentConfigurationBuilder().withGrid(this.tblEnviados)
	        																								   .withVisibleProperties(visibleColumns)
	        																								   .withColumnHeaderKeys(columnHeaders)
	        																								  // .withDateFormattingProperties(new ArrayList<String>(
                                                                                                              //         Arrays.asList("Fecha Envio")))
	        																								  // .withColumnFormatters(columnFormatters)
	                                                                                                           .build();

	        /* Configuring Sheets */
	        ArrayList<ExportExcelComponentConfiguration> componentList1 = new ArrayList<ExportExcelComponentConfiguration>();
	        componentList1.add(componentConfig1);

	        ExportExcelSheetConfiguration sheetConfig1 = new ExportExcelSheetConfigurationBuilder().withReportTitle("Mensajes Enviados")
	                                                                                               .withSheetName("Mensajes")
	                                                                                               .withComponentConfigs(componentList1)
	                                                                                               .withIsHeaderSectionRequired(Boolean.TRUE)
	                                                                                               .build();

	        /* Configuring Excel */
	        ArrayList<ExportExcelSheetConfiguration> sheetList = new ArrayList<ExportExcelSheetConfiguration>();
	        sheetList.add(sheetConfig1);
	        ExportExcelConfiguration config1 = new ExportExcelConfigurationBuilder().withGeneratedBy("SMART-SMS")
	                                                                                .withSheetConfigs(sheetList)
	                                                                                .build();

	        return new ExportToExcelUtility<Mensaje>(this.tblEnviados.getUI(), config1, Mensaje.class);
	    }
	
	
	/////////////////
	
	
	///no se esta usando..mejorar
	private void crearExcel() throws IOException {
		
		IndexedContainer containerMensaje = (IndexedContainer) tblEnviados.getContainerDataSource();
		List<Mensaje> listaMensajes = (List<Mensaje>) containerMensaje.getItemIds();
		
		XSSFWorkbook wb = new XSSFWorkbook();
	    XSSFSheet sheet = wb.createSheet("Mensajes Enviados");
	     
	    int i=0;
	    SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
	    for(Mensaje mensaje : listaMensajes) {
	        
	    	if (i==0) {
	    		XSSFRow header = sheet.createRow(i);
	    		header.createCell(0).setCellValue("ID");
		    	header.createCell(1).setCellValue("Celular");
		    	header.createCell(2).setCellValue("Mensaje");
		    	header.createCell(3).setCellValue("Fecha Envio");
		    	header.createCell(4).setCellValue("Hora Envio");
		    	header.createCell(5).setCellValue("Nombre");
		    	header.createCell(6).setCellValue("Status");
		    	header.createCell(7).setCellValue("Detalle Status");
		    	header.createCell(8).setCellValue("Nro. intentos");
	    	} else {
	    		XSSFRow rows = sheet.createRow(i);
	            rows.createCell(0).setCellValue(mensaje.getMensajeId());
	            rows.createCell(1).setCellValue(mensaje.getCelular());
	            rows.createCell(2).setCellValue(mensaje.getMensaje());
	            rows.createCell(3).setCellValue(sdf.format( mensaje.getFechaEnvio()));
	            rows.createCell(4).setCellValue(mensaje.getHoraEnvio());
	            rows.createCell(5).setCellValue(mensaje.getNombre());
	            rows.createCell(6).setCellValue(mensaje.getStatus());
	            rows.createCell(7).setCellValue(mensaje.getStatusDetalle());
	            rows.createCell(8).setCellValue(mensaje.getNumeroIntentos());
	    	}
	    	i=i+1;
	    	
        
	    }
	    
	    String basepath = VaadinService.getCurrent().getBaseDirectory().getAbsolutePath();
	    FileOutputStream out = new FileOutputStream(new File(basepath+(char)92+"MensajesEnviados.xls"));

       wb.write(out);
	       
       out.close();
       
       Resource res = new FileResource(new File(basepath + (char)92+"MensajesEnviados.xls"));
       FileDownloader fd = new FileDownloader(res);
       fd.extend(btnExportarExcel);
	   

	}
	
	public void exportarExcel() {
		
		btnExportarExcel.addClickListener(new Button.ClickListener() {
			@Override		
			public void buttonClick(ClickEvent event) {
				
				ExportToExcelUtility<Mensaje> exportToExcelUtility = customizeExportExcelUtility();
                exportToExcelUtility.setSourceUI(UI.getCurrent());
                exportToExcelUtility.setResultantExportType(ExportType.XLS);
                exportToExcelUtility.export();
				
			}
		});
		
			
	}
	
	public void datosBandejaEnviados(boolean crear) { 
		mensajeService = new MensajeService();
		llenarBandejaEnviados(mensajeService.findMensajesUsuario(usuarioId,"T"),crear); 
	
	}
	
	private void cabeceraTabla() {
		
		tblEnviados.addColumn("ID", Integer.class);
		tblEnviados.addColumn("Celular", String.class);
		tblEnviados.addColumn("Mensaje", String.class);
		tblEnviados.addColumn("Fecha Envio", String.class);
		tblEnviados.addColumn("Hora Envio", String.class);
		tblEnviados.addColumn("Nombre", String.class);
		tblEnviados.addColumn("Status", String.class);
		tblEnviados.addColumn("Detalle Status", String.class);
		tblEnviados.addColumn("Nro intentos", Integer.class);
		
		//tblEnviados.getColumn("Fecha Envio").setRenderer(new DateRenderer(new SimpleDateFormat("dd-MMM-yyyy") ));
		
		
	
	}

	@SuppressWarnings("unchecked")
	private void llenarBandejaEnviados(List<Mensaje> mensajes, boolean crear) {
		IndexedContainer containerMensaje = new IndexedContainer();

		containerMensaje.addContainerProperty("ID", Integer.class,"");
		containerMensaje.addContainerProperty("Celular", String.class,"");
		containerMensaje.addContainerProperty("Nombre", String.class,"");
		containerMensaje.addContainerProperty("Mensaje", String.class,"");
		containerMensaje.addContainerProperty("Fecha Envio", String.class,"");
		containerMensaje.addContainerProperty("Hora Envio", String.class,"");
		containerMensaje.addContainerProperty("Status", String.class,"");
		containerMensaje.addContainerProperty("Detalle Status", String.class,"");
		containerMensaje.addContainerProperty("Nro intentos", Integer.class,"");
		
		addFiltros(containerMensaje,crear);
		
		
		if (mensajes.size() > 0) {
			
			SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
			for(Mensaje mensaje : mensajes) {
				Item item = containerMensaje.addItem(mensaje);
				item.getItemProperty("ID").setValue(mensaje.getMensajeId());
				item.getItemProperty("Celular").setValue(mensaje.getCelular());
				item.getItemProperty("Nombre").setValue(mensaje.getNombre());
				item.getItemProperty("Mensaje").setValue(mensaje.getMensaje());
				item.getItemProperty("Fecha Envio").setValue(sdf.format(mensaje.getFechaEnvio()));
				item.getItemProperty("Hora Envio").setValue(mensaje.getHoraEnvio());
				item.getItemProperty("Status").setValue(mensaje.getStatus());
				item.getItemProperty("Detalle Status").setValue(mensaje.getStatusDetalle());
				item.getItemProperty("Nro intentos").setValue(mensaje.getNumeroIntentos());
				
			}
			tblEnviados.setContainerDataSource(containerMensaje);

		} else {
			
			tblEnviados.setContainerDataSource(containerMensaje);
		}
	
	}
	
	private void addFiltros(IndexedContainer containerMensaje, boolean crear){
		 
		if (!crear)
				tblEnviados.removeHeaderRow(1); 
		HeaderRow filterRow = tblEnviados.appendHeaderRow();
			
		for (Object pid: tblEnviados.getContainerDataSource()
                .getContainerPropertyIds()) {
			HeaderCell cell = filterRow.getCell(pid);
			
			// Have an input field to use for filter
//			if (pid == "Fecha Envio") {
//				DateField filterField = new DateField();
//				//SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yyyy");
//				filterField.setDateFormat("dd-MMM-yyyy");
//				filterField.setWidth("300px");
//				filterField.setHeight("18px");
//				filterField.addValueChangeListener(change -> {
//					containerMensaje.removeContainerFilters(pid);
//					if ((change.getProperty().getValue()!= null)) {
//						containerMensaje.addContainerFilter(new SimpleStringFilter(pid, change.toString(), true, false));
//					}
//				});
//				cell.setComponent(filterField);	
//			}else{
				
					
				TextField filterField = new TextField();
	
				filterField.setWidth("300px");
				filterField.setHeight("18px");
				filterField.setColumns(8);
				
				// Update filter When the filter input is changed
				filterField.addTextChangeListener(change -> {
				   // Can't modify filters so need to replace
				   containerMensaje.removeContainerFilters(pid);
				
				   // (Re)create the filter if necessary
				   if (! change.getText().isEmpty())
				       containerMensaje.addContainerFilter(
				           new SimpleStringFilter(pid,
				               change.getText(), true, false));
				});
				
				cell.setComponent(filterField);
//			}
		}
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		
		// titulo
		titulo = new Label();
		titulo.setImmediate(false);
		titulo.setWidth("560px");
		titulo.setHeight("60px");
		titulo.setValue("Mensajes Enviados");
		titulo.setContentMode(ContentMode.HTML);
		titulo.setStyleName("titulo");
		mainLayout.addComponent(titulo);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1, "top:45.0px;left:100.0px;");
		
		// tblEnviados
		tblEnviados = new Grid();
		tblEnviados.setCaption("Mensajes Enviados");
		tblEnviados.setImmediate(false);
		tblEnviados.setWidth("100.0%");
		tblEnviados.setHeight("100.0%");
//		tblEnviados.setSelectable(true);
//		tblEnviados.setMultiSelectMode(MultiSelectMode.SIMPLE);
//		tblEnviados.setMultiSelect(true);
				
	
		mainLayout.addComponent(tblEnviados, "top:90.0px;right:54.0px;bottom:118.0px;left:12.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("100.0%");
		horizontalLayout_1.setHeight("50px");
		horizontalLayout_1.setMargin(false);

		// btnCargarMensajes
		btnCargarMensajes = new NativeButton();
		btnCargarMensajes.setCaption("Cargar Mensajes");
		btnCargarMensajes.setImmediate(false);
		btnCargarMensajes.setWidth("160px");
		btnCargarMensajes.setHeight("40px");
		btnCargarMensajes.setIcon(new ThemeResource("../images/buttons/mobile-phone.png"));
		horizontalLayout_1.addComponent(btnCargarMensajes);
		horizontalLayout_1.setComponentAlignment(btnCargarMensajes, new Alignment(20));
		
		// btnCargarMensajes
		btnExportarExcel = new NativeButton();
		btnExportarExcel.setCaption("Exportar Excel");
		btnExportarExcel.setImmediate(true);
		btnExportarExcel.setWidth("160px");
		btnExportarExcel.setHeight("40px");
		btnExportarExcel.setIcon(new ThemeResource("../images/buttons/Excel-icon-32.png"));
		horizontalLayout_1.addComponent(btnExportarExcel);
		horizontalLayout_1.setComponentAlignment(btnExportarExcel, new Alignment(20));
		


		
		return horizontalLayout_1;
	}
	

}

