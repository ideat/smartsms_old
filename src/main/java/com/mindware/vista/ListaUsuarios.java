package com.mindware.vista;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import com.mindware.domain.Contacto;
import com.mindware.domain.Usuario;
import com.mindware.services.MensajeService;
import com.mindware.services.UsuarioService;
import com.mindware.util.SendSms;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.data.util.filter.SimpleStringFilter;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.SelectionEvent;
import com.vaadin.event.SelectionEvent.SelectionListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.Grid;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Grid.HeaderCell;
import com.vaadin.ui.Grid.HeaderRow;
import com.vaadin.ui.Grid.SelectionMode;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.CloseListener;
import com.vaadin.ui.renderers.DateRenderer;

public class ListaUsuarios extends CustomComponent{
	private AbsoluteLayout mainLayout;
	private Grid gridUsuarios;
	private HorizontalLayout horizontalLayout_1;

	private NativeButton btnEditar;
	private NativeButton btnNuevo;
	private Label titulo;
	
	private UsuarioService usuarioService;
	private int usuarioId;
	private Usuario usuarioEdit;
	
	
	
	public int getUsuarioId() {
		return usuarioId;
	}

	public void setUsuarioId(int usuarioId) {
		this.usuarioId = usuarioId;
	}
		

	public ListaUsuarios(int userId) {
		usuarioId = userId;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		cabeceraGrid();
		datosUsuarios();
		addUsuario();
		editarUsuario();
		seleccionarUsuario();
	}
	
	private void usuarioEditar(Object fila) {
		usuarioEdit = new Usuario();
		usuarioEdit.setEstado(gridUsuarios.getContainerDataSource().getItem(fila).getItemProperty("Estado").getValue().toString());
		usuarioEdit.setLogin(gridUsuarios.getContainerDataSource().getItem(fila).getItemProperty("Login").getValue().toString());
		usuarioEdit.setNombre(gridUsuarios.getContainerDataSource().getItem(fila).getItemProperty("Nombre").getValue().toString());
		usuarioEdit.setPassword(gridUsuarios.getContainerDataSource().getItem(fila).getItemProperty("Clave").getValue().toString());
		usuarioEdit.setRol(gridUsuarios.getContainerDataSource().getItem(fila).getItemProperty("Rol").getValue().toString());
		usuarioEdit.setUsuarioId((int) gridUsuarios.getContainerDataSource().getItem(fila).getItemProperty("ID").getValue());

	}
	
	public void editarUsuario () {
		btnEditar.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				EditUsuario editUsuario = new EditUsuario(usuarioEdit);
				editUsuario.setModal(true);
				editUsuario.setWidth("550px");
				editUsuario.setHeight("520px");
				editUsuario.center();
				UI.getCurrent().addWindow(editUsuario);
				
				editUsuario.addCloseListener(new Window.CloseListener() {
					
					@Override
					public void windowClose(CloseEvent e) {
						llenarGridUsuarios(usuarioService.listaUsuarios("%"),false);
						
					}
				});
			}
		});
	}
	
	public void seleccionarUsuario() {
		
		gridUsuarios.addSelectionListener(selectionEvent -> { // Java 8
		    // Get selection from the selection model
		    Object fila = gridUsuarios.getSelectedRow();// getSelectionModel().getSelectedRows();
		    if (fila!=null)
		    	usuarioEditar(fila);
		});
	}
	
	private void addUsuario() {
		btnNuevo.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				AddUsuario addUsuario = new AddUsuario();
				addUsuario.setModal(true);
				addUsuario.setWidth("550px");
				addUsuario.setHeight("520px");
				addUsuario.center();
				UI.getCurrent().addWindow(addUsuario);

				addUsuario.addCloseListener(new Window.CloseListener() {
					@Override
					public void windowClose(Window.CloseEvent e) {
						llenarGridUsuarios(usuarioService.listaUsuarios("%"), false);
										}
				});
				
			}
		});
	}
	
	private void datosUsuarios() {
		usuarioService = new UsuarioService();
		llenarGridUsuarios(usuarioService.listaUsuarios("%"),true);
	}
	
	private void addFiltros(IndexedContainer containerUsuario, boolean crear){
		 
		if (!crear)
				gridUsuarios.removeHeaderRow(1); 
		HeaderRow filterRow = gridUsuarios.appendHeaderRow();
			
		for (Object pid: gridUsuarios.getContainerDataSource()
                .getContainerPropertyIds()) {
			HeaderCell cell = filterRow.getCell(pid);
			
			// Have an input field to use for filter
			TextField filterField = new TextField();
			filterField.setWidth("200px");
			filterField.setHeight("18px");
			filterField.setColumns(8);
			
			// Update filter When the filter input is changed
			filterField.addTextChangeListener(change -> {
			   // Can't modify filters so need to replace
			   containerUsuario.removeContainerFilters(pid);
			
			   // (Re)create the filter if necessary
			   if (! change.getText().isEmpty())
			       containerUsuario.addContainerFilter(
			           new SimpleStringFilter(pid,
			               change.getText(), true, false));
			});
			cell.setComponent(filterField);
		}
	}
	
	private void llenarGridUsuarios(List<Usuario> usuarios, boolean crear) {
		IndexedContainer containerUsuario = new IndexedContainer();

		containerUsuario.addContainerProperty("ID", Integer.class,"");
		containerUsuario.addContainerProperty("Nombre", String.class,"");
		containerUsuario.addContainerProperty("Login", String.class,"");
		containerUsuario.addContainerProperty("Clave", String.class,"");
		containerUsuario.addContainerProperty("Estado", String.class,"");
		containerUsuario.addContainerProperty("Rol", String.class,"");
		
		addFiltros(containerUsuario,crear);
		
		if (usuarios.size() > 0) {
					
			
			for(Usuario usuario : usuarios) {
				Item item = containerUsuario.addItem(usuario);
				item.getItemProperty("ID").setValue(usuario.getUsuarioId());
				item.getItemProperty("Nombre").setValue(usuario.getNombre());
				item.getItemProperty("Login").setValue(usuario.getLogin());
				item.getItemProperty("Clave").setValue(usuario.getPassword());
				item.getItemProperty("Estado").setValue(usuario.getEstado());
				item.getItemProperty("Rol").setValue(usuario.getRol());
				
			}
			gridUsuarios.setContainerDataSource(containerUsuario);
			
		} else {
			
			gridUsuarios.setContainerDataSource(containerUsuario);
		}
	
	}
	
	private void cabeceraGrid() {
		
		gridUsuarios.addColumn("ID", Integer.class);
		gridUsuarios.addColumn("Nombre", String.class);
		gridUsuarios.addColumn("Login", String.class);
		gridUsuarios.addColumn("Clave", Field.class);
		gridUsuarios.addColumn("Estado", String.class);
		gridUsuarios.addColumn("Rol", String.class);
		gridUsuarios.getColumn("Clave").setHidden(true);
		
				
	}
	
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		
		// titulo
		titulo = new Label();
		titulo.setImmediate(false);
		titulo.setWidth("560px");
		titulo.setHeight("60px");
		titulo.setValue("Lista Usuarios");
		titulo.setContentMode(ContentMode.HTML);
		titulo.setStyleName("titulo");
		mainLayout.addComponent(titulo);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1, "top:45.0px;left:100.0px;");
		
		// tblEnviados
		gridUsuarios = new Grid();
		gridUsuarios.setCaption("Mensajes Enviados");
		gridUsuarios.setImmediate(false);
		gridUsuarios.setWidth("100.0%");
		gridUsuarios.setHeight("100.0%");
		gridUsuarios.setSelectionMode(SelectionMode.SINGLE);

				
	
		mainLayout.addComponent(gridUsuarios, "top:90.0px;right:54.0px;bottom:118.0px;left:12.0px;");
		
		return mainLayout;
	}
	
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("100.0%");
		horizontalLayout_1.setHeight("40px");
		horizontalLayout_1.setMargin(false);

		// btnNuevo
		btnNuevo = new NativeButton();
		btnNuevo.setCaption("Nuevo");
		btnNuevo.setImmediate(false);
		btnNuevo.setWidth("130px");
		btnNuevo.setHeight("40px");
		btnNuevo.setIcon(new ThemeResource("../images/buttons/users.png"));
		horizontalLayout_1.addComponent(btnNuevo);
		horizontalLayout_1.setComponentAlignment(btnNuevo, new Alignment(20));
		
		// btnEditar
		btnEditar = new NativeButton();
		btnEditar.setCaption("Editar");
		btnEditar.setImmediate(true);
		btnEditar.setWidth("130px");
		btnEditar.setHeight("40px");
		btnEditar.setIcon(new ThemeResource("../images/buttons/edit.png"));
		horizontalLayout_1.addComponent(btnEditar);
		horizontalLayout_1.setComponentAlignment(btnEditar, new Alignment(20));
		
			
		return horizontalLayout_1;
	}

}
